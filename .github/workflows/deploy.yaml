name: 📦 패키지 배포

# .changeset, packages 디렉토리의 변경사항들이 main 브렌치에 push될때 이벤트를 실행한다. 
on:
  push:
    branches:
      - main

concurrency: ${{ github.workflow }}-${{ github.ref }}

jobs:
  is-run:
    name: Changesets를 시작할 것인가?
    runs-on: ubuntu-latest
    outputs:
      result: ${{ steps.is_run_changeset.outputs.result }}
    steps:
      - name: Checkout branch
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - id: is_run_changeset
        run: |
          export result=$(make is_run_changeset)\
          echo "result=$result" >> "$GITHUB_OUTPUT"

  npm-release:
    name: Release (npm)
    runs-on: ubuntu-latest
    needs: [is-run]
    outputs:
      result: ${{ steps.is-run.outputs.result == 'true' }}
    steps:
      # 레포지토리에 체크아웃하여 소스를 가져온다.
      - name: Checkout branch
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # Node.js를 설치한다.
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "lts/*"

      # 빌드 및 테스트를 위해서 의존성을 설치한다.
      - name: Install dependencies
        run: yarn install --frozen-lockfile --ignore-engines
        env:
          CI: true

      # 패키지를 빌드한다.
      - name: Build packages
        run: yarn build

      # Changesets에서 제공하는 Action을 사용할 수 있다.
      # NPM에 배포, Git 태그 생성 등의 작업을 수행한다.
      - name: Create release Pull Request or publish to NPM
        id: changesets
        uses: changesets/action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 배포를 위해 .npmrc 파일을 생성하고 인증 토큰을 추가한다
      - name: NPM_TOKEN 설정
        if: steps.changesets.outputs.hasChangesets == 'false'
        run: |
          cat << EOF > "$HOME/.npmrc"
            //registry.npmjs.org/:_authToken=$NPM_TOKEN
          EOF
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      # postpublish에 outputs를 커스텀
      - name: re_script
        run: |
          sed -i 's/"published"/"published=true" >> "$GITHUB_OUTPUT"/' Makefile
      - name: Publish
        id: npmPublish
        if: steps.changesets.outputs.hasChangesets == 'false'
        # 게시가 발생해야 할 때 작업을 수행할 수 있습니다.
        run: npm publish

      - id: is_gh_release
        run: echo "is_gh_release=${{ steps.changesets.outputs.hasChangesets == 'false' && steps.npmPublish.outputs.published == 'true' }}"

      # steps.is_gh_release.outputs.is_gh_release가 true라면 PUBLISHED 라는 이름을 리턴
      # steps.is_gh_release.outputs.is_gh_release가 false라면 PULL_REQUEST 이라는 이름을 리턴
      - name: Set result
        id: result
        run: |
          if [ "${{ steps.is_gh_release.outputs.is_gh_release }}" == "true" ]; then
            echo "result=PUBLISHED" >> "$GITHUB_OUTPUT"
          else
            echo "result=PULL_REQUEST" >> "$GITHUB_OUTPUT"
          fi

  # github package에 배포하는 것은 메인 배포가 아니기 때문에 npm 배포가 정상적으로 완료된다면 github package에 배포한다.
  gh-release:
    name: Release (github package)
    needs: [npm-release]
    if: ${{ needs.npm-release.outputs.result == 'PUBLISHED' }}
    runs-on: ubuntu-latest
    steps:
      # 레포지토리에 체크아웃하여 소스를 가져온다.
      - name: Checkout branch
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # Node.js를 설치한다.
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "lts/*"

      # @hyeon 또는 @*/* 패키지를 Github에 배포하기위해서 @Hansanghyeon:*로 이름을 변경한다
      - name: Rename package name
        run: |
          sed -i 's/"@hyeon\/eslint-config"/"@hansanghyeon\/eslint-config"/' package.json

      # 빌드 및 테스트를 위해서 의존성을 설치한다.
      - name: Install dependencies
        run: yarn install --frozen-lockfile --ignore-engines
        env:
          CI: true

      # 배포를 위해 .npmrc 파일을 생성하고 인증 토큰을 추가한다.
      - name: Configure npm
        run: |
          cat << EOF > "$HOME/.npmrc"
            @hansanghyeon:registry=https://npm.pkg.github.com/
            //npm.pkg.github.com/:_authToken=$GH_TOKEN
          EOF
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # notification:
  #   runs-on: ubuntu-latest
  #   needs: [npm-release, gh-release]

  #   steps:
  #     - name: Generate Notes
  #       if: ${{ needs.npm-release.result == 'success' && needs.job2.result == 'success' }}
  #       run: |
  #         echo "Both job1 and job2 were successful. Notes generated."
      
  #     - name: Handle Failure
  #       if: ${{ needs.job1.result == 'failure' || needs.job2.result == 'failure' }}
  #       run: |
  #         echo "Either job1 or job2 (or both) failed. Handling failure."

